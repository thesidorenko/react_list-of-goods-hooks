{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortedField","setSortedField","isReverse","setIsReverse","goods","preparedGoods","sort","good1","good2","by_alphabet","localeCompare","by_length","length","reverse","getPreparedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,6BAAAA,E,oBAAAA,M,KAUL,IA4BaE,EAAM,WACjB,MAAsCC,mBAAwB,IAA9D,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMC,EA/BiB,SACvBA,EADuB,GAGnB,IADFJ,EACC,EADDA,YAAaE,EACZ,EADYA,UAETG,EAAa,YAAOD,GAqB1B,OAnBIJ,GACFK,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQR,GACN,KAAKJ,EAASa,YACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKZ,EAASe,UACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXV,GACFG,EAAcQ,UAGTR,EAMOS,CAAiBjB,EAAiB,CAAEG,cAAaE,cAe/D,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYjB,IAAgBJ,EAASa,cAEzCS,QAtBe,WACrBjB,EAAeL,EAASa,cAepB,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYjB,IAAgBJ,EAASe,YAEzCO,QA7Ba,WACnBjB,EAAeL,EAASe,YAsBpB,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAaf,IAEjBgB,QAAS,kBAAMf,GAAcD,IAN/B,sBAWEA,GAAaF,IACb,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QA7CI,WACZjB,EAAe,IACfE,GAAa,IAwCP,sBAUJ,6BACGC,EAAMe,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCxHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.54fe32b1.chunk.js","sourcesContent":["import { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  by_alphabet = 'alphabetically',\n  by_length = 'length',\n}\n\ninterface Queries {\n  sortedField: SortType | '',\n  isReverse: boolean,\n}\n\nconst getPreparedGoods = (\n  goods: string[],\n  { sortedField, isReverse } : Queries,\n) => {\n  const preparedGoods = [...goods];\n\n  if (sortedField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortedField) {\n        case SortType.by_alphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.by_length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App = () => {\n  const [sortedField, setSortedField] = useState<SortType | ''>('');\n  const [isReverse, setIsReverse] = useState(false);\n  const goods = getPreparedGoods(goodsFromServer, { sortedField, isReverse });\n\n  const sortByAlphabet = () => {\n    setSortedField(SortType.by_alphabet);\n  };\n\n  const sortByLength = () => {\n    setSortedField(SortType.by_length);\n  };\n\n  const reset = () => {\n    setSortedField('');\n    setIsReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortedField !== SortType.by_alphabet },\n          )}\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortedField !== SortType.by_length },\n          )}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReverse },\n          )}\n          onClick={() => setIsReverse(!isReverse)}\n        >\n          Reverse\n        </button>\n\n        {(isReverse || sortedField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}